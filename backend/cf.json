{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "CreateDashexpenseLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "b00885185lambdas",
          "S3Key": "lambdas.zip"
        },
        "Handler": "apis/expense/create-expense.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "csci-5409-ruchika-term-assignment-B00885185-dev-create-expense",
        "MemorySize": 1024,
        "Timeout": 29,
        "Role": "arn:aws:iam::222756784364:role/LabRole"
      }
    },
    "DeleteDashexpenseLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "b00885185lambdas",
          "S3Key": "lambdas.zip"
        },
        "Handler": "apis/expense/delete-expense.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "csci-5409-ruchika-term-assignment-B00885185-dev-delete-expense",
        "MemorySize": 1024,
        "Timeout": 29,
        "Role": "arn:aws:iam::222756784364:role/LabRole"
      }
    },
    "UpdateDashexpenseLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "b00885185lambdas",
          "S3Key": "lambdas.zip"
        },
        "Handler": "apis/expense/update-expense.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "csci-5409-ruchika-term-assignment-B00885185-dev-update-expense",
        "MemorySize": 1024,
        "Timeout": 29,
        "Role": "arn:aws:iam::222756784364:role/LabRole"
      }
    },
    "GetDashexpensesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "b00885185lambdas",
          "S3Key": "lambdas.zip"
        },
        "Handler": "apis/expense/get-expenses.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "csci-5409-ruchika-term-assignment-B00885185-dev-get-expenses",
        "MemorySize": 1024,
        "Timeout": 29,
        "Role": "arn:aws:iam::222756784364:role/LabRole"
      }
    },
    "GetDashbalanceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "b00885185lambdas",
          "S3Key": "lambdas.zip"
        },
        "Handler": "apis/expense/get-balance.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "csci-5409-ruchika-term-assignment-B00885185-dev-get-balance",
        "MemorySize": 1024,
        "Timeout": 29,
        "Role": "arn:aws:iam::222756784364:role/LabRole"
      }
    },
    "RegisterDashuserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "b00885185lambdas",
          "S3Key": "lambdas.zip"
        },
        "Handler": "apis/user/register-user.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "csci-5409-ruchika-term-assignment-B00885185-dev-register-user",
        "MemorySize": 1024,
        "Timeout": 29,
        "Role": "arn:aws:iam::222756784364:role/LabRole"
      }
    },
    "LoginDashuserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "b00885185lambdas",
          "S3Key": "lambdas.zip"
        },
        "Handler": "apis/user/login-user.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "csci-5409-ruchika-term-assignment-B00885185-dev-login-user",
        "MemorySize": 1024,
        "Timeout": 29,
        "Role": "arn:aws:iam::222756784364:role/LabRole"
      }
    },
    "ResetDashpasswordLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "b00885185lambdas",
          "S3Key": "lambdas.zip"
        },
        "Handler": "apis/user/reset-password.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "csci-5409-ruchika-term-assignment-B00885185-dev-reset-password",
        "MemorySize": 1024,
        "Timeout": 29,
        "Role": "arn:aws:iam::222756784364:role/LabRole"
      }
    },
    "SendDashexpenseDashemailLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "b00885185lambdas",
          "S3Key": "lambdas.zip"
        },
        "Handler": "apis/lambda/send-expense-email.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "send-expense-email",
        "MemorySize": 1024,
        "Timeout": 29,
        "Role": "arn:aws:iam::222756784364:role/LabRole"
      }
    },
    "SendDashexpenseDashemailEventSourceMappingSQSExpenseQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [],
      "Properties": {
        "BatchSize": 10,
        "MaximumBatchingWindowInSeconds": 1,
        "EventSourceArn": "arn:aws:sqs:us-east-1:222756784364:ExpenseQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "SendDashexpenseDashemailLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-csci-5409-ruchika-term-assignment-B00885185",
        "ProtocolType": "HTTP",
        "DisableExecuteApiEndpoint": false,
        "CorsConfiguration": {
          "AllowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "X-Amzn-Trace-Id"
          ],
          "AllowMethods": [
            "OPTIONS",
            "POST",
            "PUT",
            "GET"
          ],
          "AllowOrigins": [
            "*"
          ]
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "CreateDashexpenseLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateDashexpenseLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateDashexpense": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateDashexpenseLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostExpenseCreateDashexpense": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /expense/create-expense",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateDashexpense"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateDashexpense"
    },
    "DeleteDashexpenseLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteDashexpenseLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteDashexpense": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteDashexpenseLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostExpenseDeleteDashexpense": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /expense/delete-expense",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteDashexpense"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteDashexpense"
    },
    "UpdateDashexpenseLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateDashexpenseLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateDashexpense": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateDashexpenseLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutExpenseUpdateDashexpense": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /expense/update-expense",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateDashexpense"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateDashexpense"
    },
    "GetDashexpensesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashexpensesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetDashexpenses": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetDashexpensesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetExpenseGetDashexpenses": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /expense/get-expenses",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetDashexpenses"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetDashexpenses"
    },
    "GetDashbalanceLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashbalanceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetDashbalance": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetDashbalanceLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetExpenseGetDashbalance": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /expense/get-balance",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetDashbalance"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetDashbalance"
    },
    "RegisterDashuserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterDashuserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationRegisterDashuser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "RegisterDashuserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostUserRegisterDashuser": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /user/register-user",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationRegisterDashuser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationRegisterDashuser"
    },
    "LoginDashuserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoginDashuserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationLoginDashuser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "LoginDashuserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostUserLoginDashuser": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /user/login-user",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationLoginDashuser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationLoginDashuser"
    },
    "ResetDashpasswordLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ResetDashpasswordLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationResetDashpassword": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ResetDashpasswordLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostUserResetDashpassword": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /user/reset-password",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationResetDashpassword"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationResetDashpassword"
    },
    "ExpenseManager": {
      "Type": "AWS::ElasticBeanstalk::Application",
      "Properties": {
        "ApplicationName": "ExpenseManager",
        "Description": "Expense Manager Application deployed on AWS Elastic Beanstalk"
      }
    },
    "ExpenseManagerVersion": {
      "Type": "AWS::ElasticBeanstalk::ApplicationVersion",
      "Properties": {
        "ApplicationName": {
          "Ref": "ExpenseManager"
        },
        "Description": "Application version",
        "SourceBundle": {
          "S3Bucket": "ruchika-b00885185-termassignment-frontend",
          "S3Key": "expensemanager.zip"
        }
      }
    },
    "ExpenseManagerConfigurationTemplate": {
      "Type": "AWS::ElasticBeanstalk::ConfigurationTemplate",
      "Properties": {
        "ApplicationName": {
          "Ref": "ExpenseManager"
        },
        "Description": "Application configuration template",
        "SolutionStackName": "64bit Amazon Linux 2 v5.8.4 running Node.js 18",
        "OptionSettings": [
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "IamInstanceProfile",
            "Value": "MyInstanceProfile"
          },
          {
            "Namespace": "aws:elasticbeanstalk:environment",
            "OptionName": "ServiceRole",
            "Value": "arn:aws:iam::222756784364:role/MyServiceRole"
          },
          {
            "Namespace": "aws:elasticbeanstalk:environment",
            "OptionName": "EnvironmentType",
            "Value": "SingleInstance"
          },
          {
            "Namespace": "aws:elasticbeanstalk:application:environment",
            "OptionName": "REACT_APP_BASE_URL",
            "Value": {
              "Fn::GetAtt": [
                "HttpApi",
                "ApiEndpoint"
              ]
            }
          }
        ]
      }
    },
    "ExpenseManagerEnvironment": {
      "Type": "AWS::ElasticBeanstalk::Environment",
      "Properties": {
        "ApplicationName": {
          "Ref": "ExpenseManager"
        },
        "EnvironmentName": "ExpenseManagerEnvironment",
        "TemplateName": {
          "Ref": "ExpenseManagerConfigurationTemplate"
        },
        "VersionLabel": {
          "Ref": "ExpenseManagerVersion"
        }
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "users_info",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "ExpensesTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "expenses",
        "AttributeDefinitions": [
          {
            "AttributeName": "expenseId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "expenseId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "ExpenseQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "ExpenseQueue",
        "VisibilityTimeout": 60
      }
    },
    "ExpenseQueuePolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "ExpenseQueue"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sns.amazonaws.com"
              },
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "ExpenseQueue",
                  "Arn"
                ]
              }
            }
          ]
        }
      }
    },
    "ExpenseSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "ExpenseSNSTopic",
        "DisplayName": "ExpenseSNSTopic",
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "ExpenseQueue",
                "Arn"
              ]
            },
            "Protocol": "sqs"
          }
        ]
      }
    },
    "EmailExpenseSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "EmailExpenseSNSTopic",
        "DisplayName": "EmailExpenseSNSTopic",
        "Subscription": [
          {
            "Endpoint": "ruchikanagpal1992@gmail.com",
            "Protocol": "email"
          }
        ]
      }
    }
  },
  "Outputs": {
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-csci-5409-ruchika-term-assignment-B00885185-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-csci-5409-ruchika-term-assignment-B00885185-dev-HttpApiUrl"
      }
    }
  }
}